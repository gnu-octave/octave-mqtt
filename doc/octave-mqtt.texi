\input texinfo @c -*-texinfo-*-
@c Copyright (c) 2022, John Donoghue <john.donoghue@ieee.org>
@c Octave MQTT - Implementation of MQTT functions

@c For manually generating the documentation use
@c   LANGUAGE=en makeinfo --html --no-split octave-mqtt.texi

@c %*** Start of HEADER
@setfilename octave-mqtt.info
@settitle Octave MQTT - Implementation of MQTT for GNU Octave
@afourpaper
@paragraphindent 0
@finalout
@set COPYRIGHT_DATE 2022-2023
@c @afourwide
@c %*** End of the HEADER

@include version.texi
@include macros.texi

@c %*** Start of TITLEPAGE
@titlepage
@c @center @image{octave-mqtt-logo}
@vskip 0pt plus 1filll
@title Octave MQTT Toolkit @value{VERSION}
@subtitle MQTT functions for @acronym{GNU} Octave.
@author John Donoghue
@page
@vskip 0pt plus 1filll
Copyright @copyright{} @value{COPYRIGHT_DATE} John Donoghue

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the same conditions as for modified versions.

@page
@heading Distribution
The @acronym{GNU} Octave MQTT package is @dfn{free} software.
Free software is a matter of the users' freedom to run, copy, distribute,
study, change and improve the software.
This means that everyone is free to use it and free to redistribute it
on certain conditions.  The @acronym{GNU} Octave MQTT package
is not, however, in the public domain.  It is copyrighted and there are
restrictions on its distribution, but the restrictions are designed to
ensure that others will have the same freedom to use and redistribute
Octave that you have.  The precise conditions can be found in the
@acronym{GNU} General Public License that comes with the @acronym{GNU}
Octave MQTT package and that also appears in @ref{Copying}.

To download a copy of the @acronym{GNU} Octave MQTT package, please visit
@url{https://sourceforge.net/projects/octave-mqtt/}.

@end titlepage
@c %*** End of TITLEPAGE

@dircategory Math
@direntry
* MQTT for Octave: (mqtt).         MQTT Toolbox for Octave 
@end direntry

@c %*** Start of BODY
@contents
@ifnottex
@node Top
@top Introduction
The Octave MQTT toolkit is a set of MQTT routines for GNU Octave
@end ifnottex

@menu
* Installing and loading::    Installing and loading the toolkit
* Basic Usage Overview::      Basic Usage Overview
* Function Reference::        Toolkit functions
* Copying::                   Copying
* Index::                     Index
@end menu

@c -------------------------------------------------------------------------
@node Installing and loading
@chapter Installing and loading
@cindex Installing and loading

The toolkit must be installed and then loaded to be used.

It can be installed in @acronym{GNU} Octave directly from the website,
or can be installed in an off-line mode via a downloaded tarball.

The toolkit has a dependency on the PAHO-MQTT-C library (@url{https://www.eclipse.org/paho/}), so it must be installed in order
to successfully install the toolkit.

The toolkit must be then be loaded once per each @acronym{GNU} Octave session in order to use its functionality.

@section Online Direct install
@cindex Online install
With an internet connection available, the octave mqtt package can be installed from
the octave-mqtt website using the following command within @acronym{GNU} Octave:

@example
pkg install https://sourceforge.net/projects/octave-mqtt/files/v@value{VERSION}/octave-mqtt-@value{VERSION}.tar.gz/download
@end example

The latest released version of the toolkit will be downloaded and installed.

@section Off-line install
@cindex Off-line install
With the toolkit package already downloaded, and in the current directory when running
@acronym{GNU} Octave, the package can be installed using the following command within @acronym{GNU} Octave:

@example
pkg install octave-mqtt-@value{VERSION}.tar.gz
@end example

@section Loading
@cindex Loading
Regardless of the method of installing the toolkit, in order to use its functions,
the toolkit must be loaded using the pkg load command:

@example
pkg load mqtt
@end example

The toolkit must be loaded on each @acronym{GNU} Octave session.

@c -------------------------------------------------------------------------
@node Basic Usage Overview
@chapter Basic Usage Overview
@cindex Basic Usage Overview

The overview connects to the public broker at HiveMQ (@url{https://www.hivemq.com/public-mqtt-broker/})
and follows this general flow:

@section Connection to a broker
@cindex Connection to a broker

Connection to the broker is done using the mqttclient function.

@subsubheading Example
@example
@code {
brokerAddress = "tcp://broker.hivemq.com";
port = 1883;

client = mqttclient(brokerAddress, "Port", port)
}
@kbd {
client =

  Client with properties
    BrokerAddress: tcp://broker.hivemq.com
             Port: 1883
         ClientID: 
          Timeout: 5
KeepAliveDuration: 60
    Subscriptions: [0x3] table
        Connected: 1
}
@end example

Additional properties can be included for Timeout, Username, Password and more.

@section Subscribe to a Topic
@cindex Subscribe to a Topic

To get notifications for changes to a topic, subscribe to the topic.

@subsubheading Example
@example
@code {
topic = "octave/test/field1";

subscribe(client, topic)
}
@kbd {
ans =

  scalar structure containing the fields:

    Topic = octave/test/field1
    QualityOfService = 0
    Callback =
}
@end example

@section Write to a Topic
@cindex Write to a Topic

To publish data to the broker, use the wrote function.

@subsubheading Example
@example
@code {
write(client, topic, "hello world")
}
@end example

@section Read from subscribed Topics
@cindex Read from subscribed Topics

Reading data from a topic can be done using the peek function (which will not clear the data from the received queue)
or the read function (that will clear the message from the received queue)

@subsubheading Example
@example
@code {
# see if there is message
msg = peek(client)
}
@kbd {
msg =

  scalar structure containing the fields:

    Time = 1.6560e+09
    Topic = octave/test/field1
    Data = hello world
}
@code {
# read message from queue
msg = read(client)
}
@kbd {
msg =

  scalar structure containing the fields:

    Time = 1.6560e+09
    Topic = octave/test/field1
    Data = hello world
}
@end example

@section Close the client
@cindex Close the client

To close the client and free any resources, use the clear function.

@subsubheading Example
@example
@code {
clear client
}
@end example

@c -------------------------------------------------------------------------
@node Function Reference
@chapter Function Reference
@cindex Function Reference

The functions currently available in the toolkit are described below;

@include functions.texi

@c -------------------------------------------------------------------------

@include gpl.texi

@c -------------------------------------------------------------------------
@node Index 
@unnumbered Index 
 
@printindex cp
 
@bye
